{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  defineNestedType,\n  defineDocumentType,\n  makeSource,\n} from 'contentlayer/source-files';\n\nconst Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `blog/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"the title of the post \",\n      required: true,\n    },\n    excerpt: {\n      type:\"string\",\n      description: \"the description of the post \",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"the date of the post \",\n      required: true,\n    },\n    image: {\n      type: \"string\",\n      description: \"the  featured image of the post \",\n      required: true,\n    },\n    author: {\n      type: \"string\",\n      description: \"the  author image of the post \",\n      required: true,\n    },\n    categories: {\n      type: \"list\",\n      of: Category,\n      description: \"the  categories image of the post \",\n      required: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (doc) => `${doc._raw.flattenedPath}`,\n    }\n  }\n}))\n\nconst Category = defineNestedType(() => ({\n  name: \"Category\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the category\",\n      required: true,\n    }\n  }\n}))\n\nconst Project = defineDocumentType(() => ({\n  name: \"Project\",\n  filePathPattern: `projects/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the project\",\n      require: true,\n    },\n    location: {\n      type: \"string\",\n      description: \"The location of the project\",\n      require: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"The date of the project\",\n      require: true,\n    },\n    image: {\n      type: \"string\",\n      description: \"The image of the project\",\n      require: true,\n    },\n    client: {\n      type: \"string\",\n      description: \"The client of the project\",\n      require: true,\n    },\n    role: {\n      type: \"string\",\n      description: \"The role of the project\",\n      require: true,\n    },\n    year: {\n      type: \"string\",\n      description: \"The year of the project\",\n      require: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"the  description content of the project \",\n      required: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    }\n  }\n}))\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Post, Project],\n})\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAK;AAAA,MACL,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,GAAG,IAAI,KAAK,aAAa;AAAA,IAC7C;AAAA,EACF;AACF,EAAE;AAEF,IAAM,WAAW,iBAAiB,OAAO;AAAA,EACvC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AACF,EAAE;AAEF,IAAM,UAAU,mBAAmB,OAAO;AAAA,EACxC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,IAC9C;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,OAAO;AAC/B,CAAC;",
  "names": []
}
